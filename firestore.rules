rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Hilfsfunktionen
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Users Collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    // Listen Collection - Haupt-Listen
    match /lists/{userId}/userLists/{listId} {
      allow read: if isAuthenticated() &&
        (isOwner(userId) || 
        resource.data.sharedWith.hasAny([request.auth.uid]));
        
      allow create: if isOwner(userId);
      
      allow update: if isAuthenticated() &&
        (isOwner(userId) || 
        resource.data.sharedWith.hasAny([request.auth.uid]));
        
      allow delete: if isOwner(userId);
    }

    // Listen Collection - Geteilte Listen
    match /lists/{userId}/sharedLists/{listId} {
      allow read, write: if isOwner(userId);
      
      allow update: if request.auth.uid == resource.data.owner;
      
      allow read: if resource.data.sharedWith.hasAny([request.auth.uid]);
    }

    // Listen Items Subcollection
    match /lists/{userId}/userLists/{listId}/items/{itemId} {
      allow read: if isOwner(userId) || 
        get(/databases/$(database)/documents/lists/$(userId)/userLists/$(listId)).data.sharedWith.hasAny([request.auth.uid]);
      
      allow write: if isOwner(userId) || 
        get(/databases/$(database)/documents/lists/$(userId)/userLists/$(listId)).data.sharedWith.hasAny([request.auth.uid]);
    }

    // User Settings
    match /userSettings/{userId} {
      allow read, write: if isOwner(userId);
    }

    // Rate Limiting für das Teilen von Listen
    match /rateLimit/{userId} {
      allow read: if isOwner(userId);
      
      allow create: if isOwner(userId);
      
      allow update: if isOwner(userId) &&
        (request.resource.data.shareCount is number &&
         request.resource.data.timestamp is timestamp);
         
      allow delete: if isOwner(userId);
    }

    // Collection für geteilte Benutzer
    match /sharedUsers/{docId} {
      allow read: if isAuthenticated();
      
      allow create: if isAuthenticated() &&
        request.resource.data.keys().hasAll(['userId', 'email']);
      
      allow update: if isAuthenticated() &&
        resource.data.userId == request.auth.uid;
        
      allow delete: if resource.data.userId == request.auth.uid;
    }

    // Collection für geteilte Listen-Metadaten
    match /sharedLists/{docId} {
      allow read: if isAuthenticated() &&
        (resource.data.sharedWith.hasAny([request.auth.uid]) ||
         resource.data.owner == request.auth.uid);
         
      allow create: if isAuthenticated() &&
        request.resource.data.owner == request.auth.uid;
        
      allow update: if isAuthenticated() &&
        (resource.data.sharedWith.hasAny([request.auth.uid]) ||
         resource.data.owner == request.auth.uid);
         
      allow delete: if resource.data.owner == request.auth.uid;
    }
  }
}